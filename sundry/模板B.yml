name: Fork & Edit

on:
  workflow_dispatch:
  schedule:
    - cron: "30 20 * * *"
  
jobs:
  ForkEditlist:
    runs-on: ubuntu-latest
    env:
      TZ: 'Asia/Shanghai'
    
    steps: 
    - name: Checkout target repository
      uses: actions/checkout@v4.1.7
      with:
        repository: Auniquesir/Tools
        path: Tools-repo

    - name: Tools
      run: |
        curl https://raw.githubusercontent.com/Auniquesir/Box/X/script/Forks.sh | sh

###### Egern
      # 适配规则
    - name: Edit Egern/Rules
      run: |
        cd Tools-repo/Egern/Rules
        for file in *.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/, /,/g' \
                   -e 's/;/# /g' \
                   -e 's/host,/HOST,/g' \
                   -e 's/host-/HOST-/g' \
                   -e 's/-suffix/-SUFFIX/g' \
                   -e 's/-keyword/-KEYWORD/g' \
                   -e 's/ip-cidr/IP-CIDR/g' \
                   -e 's/-wildcard/-WILDCARD/g' \
                   -e 's/geoip/GEOIP/g' \
                   -e 's/HOST,/DOMAIN,/g' \
                   -e 's/HOST-/DOMAIN-/g' \
                   -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/# 数目: /d' \
                   -e '/# 规则: /d' \
                   -e '/404: Not Found/d' \
                   -e '/^\s*[#;]/d' \
                   -e '/^$/d' \
                   "$file"
            # 如果为IP规则且不包含no-resolve 则添加no-resolve
            awk '/^IP-/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile
            mv tmpfile "$file"

            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 规则统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi
          else
            echo "$file not found."
          fi
        done
        
      # 去重排序
    - name: Remove duplicates and lines 
      run: |
        cd Tools-repo/Egern/Rules
        shopt -s nullglob  # 避免没有匹配的文件时保留原始通配符
        for file in Reject.list; do
          if [ -f "$file" ]; then
            sorted_file="sorted_${file}"
            # 使用 grep 去掉包含 # 的行
            grep -v '^\s*#' "$file" | grep -v '^\s*$' | sort | uniq > "$sorted_file"
            mv "$sorted_file" "$file"
          else
            echo "$file not found."
          fi
        done
      shell: bash    

###### Egern      
      # 适配规则
    - name: Edit Egern/Rules and add no-resolve
      run: |
        cd Tools-repo/Egern/Rules
        for file in *.yaml; do
          if [ -f "$file" ]; then
            # 适配
            sed -i -e 's/, /,/g' \
                   -e 's/;/# /g' \
                   -e 's/host,/HOST,/g' \
                   -e 's/host-/HOST-/g' \
                   -e 's/-suffix/-SUFFIX/g' \
                   -e 's/-keyword/-KEYWORD/g' \
                   -e 's/ip-cidr/IP-CIDR/g' \
                   -e 's/geoip/GEOIP/g' \
                   -e 's/HOST,/DOMAIN,/g' \
                   -e 's/HOST-/DOMAIN-/g' \
                   -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                   -e 's/,extended-matching$//g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e '/\(USER-AGENT\|OR\|AND\|NOT\),/ s/^/#/' \
                   -e 's| \{1,\}//.*$||' \
                   -e 's/,\*/,.*/g' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/404: Not Found/d' \
                   -e '/^\s*[#;]/d' \
                   -e '/^$/d' \
                   "$file"
    
            cp "$file" tmpfile

            domain_set=""
            domain_suffix_set=""
            domain_keyword_set=""
            domain_regex_set=""
            ip_cidr_set=""
            ip_cidr6_set=""
            asn_set=""
            url_regex_set=""
            
            # 处理规则，将匹配的行添加到相应的集合中
            awk -F, '
              /^DOMAIN,/ {domain_set = domain_set "\n- " $2}
              /^DOMAIN-SUFFIX,/ {domain_suffix_set = domain_suffix_set "\n- " $2}
              /^DOMAIN-KEYWORD,/ {domain_keyword_set = domain_keyword_set "\n- " $2}
              /^DOMAIN-WILDCARD,/ {domain_regex_set = domain_regex_set "\n- " $2}
              /^IP-CIDR,/ {ip_cidr_set = ip_cidr_set "\n- " $2}
              /^IP-CIDR6,/ {ip_cidr6_set = ip_cidr6_set "\n- " $2}
              /^IP-ASN,/ {asn_set = asn_set "\n- '\''" $2 "'\''"}
              /^URL-REGEX,/ {url_regex_set = url_regex_set "\n- '\''" $2 "'\''"}
            END {
              # 输出集合
              print "domain_set:" domain_set
              print "domain_suffix_set:" domain_suffix_set
              print "domain_keyword_set:" domain_keyword_set
              print "domain_regex_set:" domain_regex_set
              print "ip_cidr_set:" ip_cidr_set
              print "ip_cidr6_set:" ip_cidr6_set
              print "asn_set:" asn_set
              print "url_regex_set:" url_regex_set
            }
            ' tmpfile > "$file"
            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 规则统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"
            
            # 添加 no_resolve: true 到第5行
            sed -i '5s/^/no_resolve: true\n/' "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi

          else
            echo "$file not found."
          fi
        done

###### QuantumultX
      # 适配规则
    - name: Edit QuantumultX/Rules
      run: |
        cd Tools-repo/QuantumultX/Rules
        for file in *.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/, /,/g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,PROXY$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e 's/,proxy$//g' \
                   -e 's/DOMAIN,/HOST,/g' \
                   -e 's/DOMAIN-/HOST-/g' \
                   -e 's/IP-CIDR6,/IP6-CIDR,/g' \
                   -e 's/,no-resolve//g' \
                   -e 's/,extended-matching$//g' \
                   -e '/\(OR\|AND\|NOT\|PROCESS-NAME\|URL-REGEX\),/ s/^/#/' \
                   -e 's| \{1,\}//.*$||' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/404: Not Found/d' \
                   -e '/^\s*[#;]/d' \
                   -e '/^$/d' \
                   "$file"

            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 规则统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi
          else
            echo "$file not found."
          fi
        done
    
        # 添加策略
        for file in *.list; do
          if [ -f "$file" ]; then
              sed -i '/^[[:space:]]*#/!s/\([^[:space:]]\)$/\1,PROXY/' "$file"
              if echo "$file" | grep -qE "(Ads_|AdGuardChinese|ConnersHua|Reject)"; then
                sed -i 's/,PROXY/,REJECT/g' "$file"
              elif echo "$file" | grep -qE "(APNs|Bilibili|WeChat|China|Direct)"; then
                sed -i 's/,PROXY/,DIRECT/g' "$file"
              fi
          else
              echo "$file not found."
          fi
        done

###### Loon
      # 适配规则
    - name: Edit Loon/Rules
      run: |
        cd Tools-repo/Loon/Rules
        for file in *.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/, /,/g' \
                   -e 's/;/# /g' \
                   -e 's/host,/HOST,/g' \
                   -e 's/host-/HOST-/g' \
                   -e 's/-suffix/-SUFFIX/g' \
                   -e 's/-keyword/-KEYWORD/g' \
                   -e 's/ip-cidr/IP-CIDR/g' \
                   -e 's/geoip/GEOIP/g' \
                   -e 's/HOST,/DOMAIN,/g' \
                   -e 's/HOST-/DOMAIN-/g' \
                   -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e 's/,extended-matching$//g' \
                   -e '/\(PROCESS-NAME\),/ s/^/#/' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/404: Not Found/d' \
                   -e '/^\s*[#;]/d' \
                   -e '/^$/d' \
                   "$file"
            # 如果为IP规则且不包含no-resolve 则添加no-resolve
            awk '/^IP-/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            
            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 规则统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi
          else
            echo "$file not found."
          fi
        done

      # Fork 可莉插件、脚本
    - name: Fork Plugin&Script
      run: |
        rm -rf Tools-repo/Loon/Plugin/*
        rm -rf Tools-repo/Loon/Script/*
        mkdir -p Tools-repo/Loon/Plugin/
        git clone https://gitlab.com/lodepuly/vpn_tool.git lodepuly_Tmp
        cp -r lodepuly_Tmp/Tool/Loon/Plugin/* Tools-repo/Loon/Plugin
        cp -r lodepuly_Tmp/Resource/Script/* Tools-repo/Loon/Script/
        rm -rf lodepuly_Tmp   

      # 修改脚本链接
    - name: Edit Loon/Plugin
      run: |
        cd Tools-repo/Loon/Plugin
        for file in *.plugin; do
          if [ "$file" ] ; then
            # 修改脚本链接
            sed -i -e '/^\s*#/d' "$file"
            sed -i 's%gitlab\.com/lodepuly/vpn_tool/-/raw/master/Resource/Script%raw.githubusercontent.com/Auniquesir/Tools/X/Loon/Script%g' "$file"
            
            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 插件名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 插件统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi
          else
            echo "$file not found."
          fi
        done

###### Shadowrocket
      # 适配规则
    - name: Edit Shadowrocket/Rules
      run: |
        cd Tools-repo/Shadowrocket/Rules
        for file in *.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/, /,/g' \
                   -e 's/;/# /g' \
                   -e 's/host,/HOST,/g' \
                   -e 's/host-/HOST-/g' \
                   -e 's/-suffix/-SUFFIX/g' \
                   -e 's/-keyword/-KEYWORD/g' \
                   -e 's/ip-cidr/IP-CIDR/g' \
                   -e 's/geoip/GEOIP/g' \
                   -e 's/HOST,/DOMAIN,/g' \
                   -e 's/HOST-/DOMAIN-/g' \
                   -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e 's/,extended-matching$//g' \
                   -e '/\(PROCESS-NAME\),/ s/^/#/' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/404: Not Found/d' \
                   -e '/^\s*[#;]/d' \
                   -e '/^$/d' \
                   "$file"
            # 如果为IP规则且不包含no-resolve 则添加no-resolve
            awk '/^IP-/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile
            mv tmpfile "$file"

            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 规则统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi

          else
            echo "$file not found."
          fi
        done        


###### Stash
      # 适配规则
    - name: Edit Stash/Rules 
      run: |
        cd Tools-repo/Stash/Rules
        for file in *.yaml *.list; do
          if [ -f "$file" ]; then
            sed -i -e 's/, /,/g' \
                   -e 's/;/# /g' \
                   -e 's/host,/HOST,/g' \
                   -e 's/host-/HOST-/g' \
                   -e 's/-suffix/-SUFFIX/g' \
                   -e 's/-keyword/-KEYWORD/g' \
                   -e 's/ip-cidr/IP-CIDR/g' \
                   -e 's/geoip/GEOIP/g' \
                   -e 's/HOST,/DOMAIN,/g' \
                   -e 's/HOST-/DOMAIN-/g' \
                   -e 's/IP6-CIDR,/IP-CIDR6,/g' \
                   -e 's/,extended-matching$//g' \
                   -e 's/,REJECT$//g' \
                   -e 's/,DIRECT$//g' \
                   -e 's/,reject$//g' \
                   -e 's/,direct$//g' \
                   -e '/\(USER-AGENT\|URL-REGEX\|OR\|AND\|NOT\),/ s/^/#/' \
                   -e 's| \{1,\}//.*$||' \
                   -e '/# 更新：/d' \
                   -e '/# AUTHOR:/d' \
                   -e '/# REPO:/d' \
                   -e '/# UPDATED:/d' \
                   -e '/404: Not Found/d' \
                   -e '/^\s*[#;]/d' \
                   -e '/^$/d' \
                   "$file"

            # 如果为IP规则且不包含no-resolve 则添加no-resolve
            awk '/^IP-/ && !/,no-resolve/ {print $0",no-resolve"; next} {print}' "$file" > tmpfile
            mv tmpfile "$file"

            # 在文件中添加注释和更新
            awk -v fname="$file" 'NR==1 {print "# 规则名称:" fname} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            awk 'NR==2 {print "# 规则统计:00000"} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            current_time=$(date "+%Y-%m-%d %H:%M:%S")
            awk -v time="$current_time" 'NR==3 {print "# 更新时间:" time} {print}' "$file" > tmpfile
            mv tmpfile "$file"
            sed -i '3a\\' "$file"
            line_count=$(tail -n +5 "$file" | wc -l)
            sed -i "2s/[0-9]\+/$line_count/" "$file"

            # 检查并删除临时文件
            if [ -f tmpfile ]; then
              rm tmpfile
            fi

            # 修改注释和格式化 .yaml 文件特有的处理
            if [[ "$file" == *.yaml ]]; then
              sed -i 's/^#/  #/g' "$file"
              sed -i '5s/^/payload:\n/' "$file"
              awk '!/\/\/|#|payload:|^ *$/ {print "  - " $0; next} {print}' "$file" > tmpfile
              mv tmpfile "$file"
            fi

          else
            echo "$file not found."
          fi
        done
        
###### Commit
    - name: Add and Commits
      run: |
        cd Tools-repo
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git pull --rebase origin X
          git push origin X  
        else
          echo "No changes to commit."
        fi

    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
